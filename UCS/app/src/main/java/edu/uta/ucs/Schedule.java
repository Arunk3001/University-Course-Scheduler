package edu.uta.ucs;

import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * This class is used to store schedules.
 *
 * <p>Contains 3 objects</p>
 *
 * <li>String name, the name of the schedule as selected by user or generated by program</li>
 * <li>int semesterNumber, the number of the semester this schedule is built for</li>
 * <li>ArrayList<Section> selectedSection, list of sections in schedule</></li>
 */
public class Schedule {

    public static final String SCHEDULE_NAMES = "SCHEDULE_NAMES";
    public static final String SCHEDULE_SAVEFILE = "SCHEDULE_SAVEFILE";

    private static final String ACTION_VERIFY_SCHEDULE = "ACTION_VERIFY_SCHEDULE";

    private String name;
    private int semesterNumber;
    private ArrayList<Section> selectedSections;

    Schedule(String name, int semesterNumber, ArrayList<Section> sectionArrayList){
        this.name = name;
        this.semesterNumber = semesterNumber;
        this.selectedSections = sectionArrayList;
    }

    Schedule(JSONObject scheduleJSON) throws JSONException {

        name = scheduleJSON.getString("ScheduleName");
        semesterNumber = scheduleJSON.getInt("ScheduleSemester");
        Log.i("Schedule Course", scheduleJSON.getString("ScheduleCourses"));

        JSONArray scheduleCoursesJSONArray = scheduleJSON.getJSONArray("ScheduleCourses");

        ArrayList<Course> semesterCourses = Course.buildCourseList(scheduleCoursesJSONArray);
        selectedSections = new ArrayList<>(semesterCourses.size());
        for (Course course : semesterCourses){
            selectedSections.addAll(course.getSectionList());
        }
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {

        this.name = name;
    }

    public ArrayList<Section> getSelectedSections() {
        return selectedSections;
    }

    public JSONObject toJSON() throws JSONException {
        JSONObject result = new JSONObject();

        result.put("ScheduleName", name);
        result.put("ScheduleSemester", getSemesterNumber());

        ArrayList<JSONObject> selectedSectionsString = new ArrayList<>(selectedSections.size());

        for (Section section : selectedSections){
            selectedSectionsString.add(section.getSourceCourse().toJSON(section));
        }
        JSONArray selectedSectionsJSONArray = new JSONArray(selectedSectionsString);

        result.put("ScheduleCourses", selectedSectionsJSONArray);

        return result;
    }

    /**
     * Builds an ArrayList of Schedules based on a JSONArray
     *
     * @param jsonSchedules JSONArray of schedules
     * @return ArrayList<Schedules>
     * @throws JSONException
     */
    public static ArrayList<Schedule> buildScheduleList(JSONArray jsonSchedules) throws JSONException {

        ArrayList<Schedule> scheduleList = new ArrayList<>(jsonSchedules.length());

        for(int index = jsonSchedules.length(); index != 0;index--){
            JSONObject scheduleJSON;
            try {
                scheduleJSON = jsonSchedules.getJSONObject(index - 1);
            }
            catch (JSONException e){
                Log.i("New Schedule JSON", "JSON Construction failed. Attempting to construct JSON from String");
                String courseString = jsonSchedules.getString(index - 1);
                scheduleJSON = new JSONObject(courseString);
            }

            Log.i("New Schedule JSON", "Adding to ArrayList: " + scheduleJSON.toString());
            scheduleList.add(new Schedule(scheduleJSON));
        }
        Collections.reverse(scheduleList);

        return scheduleList;
    }

    /**
     * Saves all schedules in the list of schedules provided to a sharedPreferance file. This will overwrite all schedules currently in that file.
     *
     * @param context Context to save with. Usually will be the calling class followed by ".this"
     *                <br>EX: MainActivity.this
     * @param schedulesToSave ArrayList of schedules
     */
    public static void saveSchedulesToFile(Context context, ArrayList<Schedule> schedulesToSave){

        SharedPreferences.Editor scheduleEditor;
        scheduleEditor = context.getSharedPreferences(Schedule.SCHEDULE_SAVEFILE, Context.MODE_PRIVATE).edit();
        scheduleEditor.clear();

        //noinspection MismatchedQueryAndUpdateOfCollection
        ArrayList<JSONObject> savedSchedules = new ArrayList<>(schedulesToSave.size());
        ArrayList<String> scheduleNames = new ArrayList<>(schedulesToSave.size());

        for (Schedule schedule : schedulesToSave){
            scheduleNames.add(schedule.getName());
            try {
                savedSchedules.add(schedule.toJSON());
                scheduleEditor.putString(Schedule.SCHEDULE_NAMES + "_" + schedule.getName(), schedule.toJSON().toString());
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        HashSet<String> scheduleNameSet = new HashSet<>(scheduleNames);
        scheduleEditor.putStringSet(Schedule.SCHEDULE_NAMES, scheduleNameSet);
        scheduleEditor.apply();

    }

    public void verifySchedule(Context context){

        Log.i("Verify Schedule", "About to attempt verify schedule");

        StringBuilder semesterParam = new StringBuilder(UserData.getContext().getString(R.string.validate_courses_param_semester));
        StringBuilder departmentParam = new StringBuilder(UserData.getContext().getString(R.string.validate_courses_param_department));
        StringBuilder classNumberParam = new StringBuilder(UserData.getContext().getString(R.string.validate_courses_param_class_number));

        for (Section section : selectedSections){

            semesterParam.append(semesterNumber).append(",");
            departmentParam.append(section.getSourceCourse().getDepartmentAcronym()).append(",");
            classNumberParam.append(section.getSectionID()).append(",");
        }

        String semesterParamFinal = semesterParam.length() > 0 ? semesterParam.substring( 0, semesterParam.length() - 1 ): "";
        String departmentParamFinal = departmentParam.length() > 0 ? departmentParam.substring( 0, departmentParam.length() - 1 ): "";
        String courseNumberParamFinal = classNumberParam.length() > 0 ? classNumberParam.substring( 0, classNumberParam.length() - 1 ): "";

        String urlFinal = UserData.getContext().getString(R.string.validate_courses_base) + semesterParamFinal + departmentParamFinal + courseNumberParamFinal;

        HTTPService.FetchURL(urlFinal, ACTION_VERIFY_SCHEDULE, context);

    }


    public static ArrayList<Schedule> loadSchedulesFromFile(Context context){

        SharedPreferences scheduleFile = context.getSharedPreferences(Schedule.SCHEDULE_SAVEFILE, Context.MODE_PRIVATE);
        Map<String, ?> schedulesOnFile = scheduleFile.getAll();

        ArrayList<Schedule> scheduleArrayList = new ArrayList<>(schedulesOnFile.size());
        for(String key : schedulesOnFile.keySet()){
            String scheduleName = key;
            Log.i("Load Schedules", "Loading Schedule Name: " + scheduleName);
            String scheduleBody = schedulesOnFile.get(key).toString();
            Log.i("Load Schedules", "Loading Schedule body: " + scheduleBody);

            try {
                JSONObject scheduleJSON = new JSONObject(scheduleBody);
                Schedule schedule = new Schedule(scheduleJSON);
                Log.i("Load Schedules", "Schedule JSON" + schedule.toJSON().toString());
                scheduleArrayList.add(schedule);
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        return scheduleArrayList;
    }

    public static ArrayList<Section> scheduleGenerator( ArrayList<Course> courseArrayList, ArrayList<Section> sectionArrayList, ArrayList<Section> blockOutTimesList) throws NoSchedulesPossibleException{
        return scheduleGenerator(0, courseArrayList,sectionArrayList,blockOutTimesList);
    }

    public static ArrayList<Section> scheduleGenerator(int index, ArrayList<Course> courseArrayList, ArrayList<Section> sectionArrayList, ArrayList<Section> blockOutTimesList) throws NoSchedulesPossibleException{

        NoSchedulesPossibleException scheduleConflict = null; //new NoSchedulesPossibleException();
        Log.i("schedule Factory", "Loop Counter:" + ((Integer) index).toString());
        if (index == courseArrayList.size()){
            return sectionArrayList;
        }
        Course course = courseArrayList.get(index);
        ArrayList<Section> possibleSections = new ArrayList<>(course.getSectionList().size());
        possibleSections.addAll(course.getSectionList());
        Collections.shuffle(possibleSections);
        // Shuffle sectionArrayList
        checkPossibleSections:

        for (Section section : possibleSections){
            if(section.getStatus() != ClassStatus.OPEN)
                continue;
            for (Section sectionToCompare : sectionArrayList){
                if (section.conflictsWith(sectionToCompare)){
                    if(scheduleConflict != null)
                        scheduleConflict.addConflict(section, sectionToCompare);
                    else scheduleConflict = new NoSchedulesPossibleException(section, sectionToCompare);
                    Log.e("Schedule Conflict Error", "Conflict between " + section.getSourceCourse().getCourseTitle() + " " + section.getSourceCourse().getCourseNumber() + "-" + section.getSectionNumber() + " and "
                            + sectionToCompare.getSourceCourse().getCourseTitle() + " " + sectionToCompare.getSourceCourse().getCourseNumber() + "-" + sectionToCompare.getSectionNumber());
                    continue checkPossibleSections;
                }
            }
            for (Section sectionToCompare : blockOutTimesList){
                if (section.conflictsWith(sectionToCompare)){
                    if (section.conflictsWith(sectionToCompare))
                        if(scheduleConflict != null)
                            scheduleConflict.addConflict(section, sectionToCompare);
                        else scheduleConflict = new NoSchedulesPossibleException(section, sectionToCompare);
                    Log.e("Schedule Conflict Error", "Conflict between " + section.getSourceCourse().getCourseTitle() + " " + section.getSourceCourse().getCourseNumber() + "-" + section.getSectionNumber() + " and "
                            + sectionToCompare.getSourceCourse().getCourseNumber() + " " + sectionToCompare.getInstructors());
                    continue checkPossibleSections;
                }
            }
            Log.i("Adding Section to List", section.toJSON().toString());
            sectionArrayList.add(section);
            try{
                return scheduleGenerator(index + 1, courseArrayList, sectionArrayList, blockOutTimesList);
            } catch (NoSchedulesPossibleException exception){
                exception.printStackTrace();
                sectionArrayList.remove(index);
                scheduleConflict = new NoSchedulesPossibleException(exception);
            }

        }throw scheduleConflict;

    }

    public static ArrayList<Section> scheduleGenerator(ArrayList<Course> courseArrayList){
        ArrayList<Section> possibleSections = new ArrayList<>();
        for(Course course : courseArrayList){
            Collections.shuffle(course.getSectionList());
            possibleSections.add(course.getSectionList().get(0));
        }

        return possibleSections;
    }

    public int getSemesterNumber() {
        return semesterNumber;
    }
}

class NoSchedulesPossibleException extends Exception {

    String message;

    public NoSchedulesPossibleException(NoSchedulesPossibleException innerError) {
        if(innerError != null)
            this.message = this.message + "\n" + innerError.message;
        else
            this.message = "";
    }

    public NoSchedulesPossibleException(Section sourceSection, Section conflictingSection){
        if(conflictingSection.getSourceCourse().getDepartmentAcronym().equalsIgnoreCase("BLOCKOUT")){
            this.message = "Conflict between " + sourceSection.getSourceCourse().getDepartmentAcronym() +  " " + sourceSection.getSourceCourse().getCourseNumber() + "-" + sourceSection.getSectionNumber()
                    + " and " + conflictingSection.getSourceCourse().getDepartmentAcronym() +  ": " + conflictingSection.getInstructors();
        }
        else
            this.message = "Conflict between " + sourceSection.getSourceCourse().getDepartmentAcronym() +  " " + sourceSection.getSourceCourse().getCourseNumber() + "-" + sourceSection.getSectionNumber()
                + " and " + conflictingSection.getSourceCourse().getDepartmentAcronym() +  " " + conflictingSection.getSourceCourse().getCourseNumber() + "-" + conflictingSection.getSectionNumber();
    }

    public void addConflict(Section sourceSection, Section conflictingSection){

        if(conflictingSection.getSourceCourse().getDepartmentAcronym().equalsIgnoreCase("BLOCKOUT")){
            this.message = this.message + "\n" +
                    "Conflict between " + sourceSection.getSourceCourse().getDepartmentAcronym() +  " " + sourceSection.getSourceCourse().getCourseNumber() + "-" + sourceSection.getSectionNumber()
                    + " and " + conflictingSection.getSourceCourse().getDepartmentAcronym() +  ": " + conflictingSection.getInstructors();
        }
        else
            this.message = this.message + "\n" +
                    "Conflict between " + sourceSection.getSourceCourse().getDepartmentAcronym() +  " " + sourceSection.getSourceCourse().getCourseNumber() + "-" + sourceSection.getSectionNumber()
                    + " and " + conflictingSection.getSourceCourse().getDepartmentAcronym() +  " " + conflictingSection.getSourceCourse().getCourseNumber() + "-" + conflictingSection.getSectionNumber();
    }

    public String printConflict(){
        Log.e("Cannot Generate", message);
        return message;
    }

}
